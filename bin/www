#!/usr/bin/env node

/**
 * Module dependencies.
 */
require('dotenv').config({path: __dirname+'/../.env'});
var debug = require('debug')('ns-plant:server');

if(process.env.PROFILE == 'development') {
  var http = require('https');
  var fs = require('fs');
  var options = {
    key: fs.readFileSync( __dirname+'/../certs/localhost.key' ),
    cert: fs.readFileSync( __dirname+'/../certs/localhost.cert' ),
    requestCert: false,
    rejectUnauthorized: false
  };
}else{
  var http = require('http');
  var options={};
}

global.redis = require('redis').createClient();
var knex = require('knex')({
  client: 'mysql',
  connection: {
    host: process.env.DB_HOST,
    user: process.env.DB_USER,
    password: process.env.DB_PASS,
    database: process.env.DB_DBASE,
    charset  : 'utf8',
    debug: false,
    typeCast: function (field, next) {
      if (field.type == "BIT" && field.length == 1) {
        var bit = field.string();

        var b = (bit === null) ? null : bit.charCodeAt(0);
        return !!b;
      }
      return next();
    },
    pool: {
      min: 0,
      max: 10
    }, acquireConnectionTimeout: 10000
  }
});
global.bookshelf = require('bookshelf')(knex);
//global.ModelBase = require('bookshelf-modelbase')(bookshelf);
global._ = require('underscore');
var app = require('../app');
global.ns = require('../index');
global.StorageService = require('../services/storage')(redis,knex);



/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(options,app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
